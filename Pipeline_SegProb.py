#%%
import argparse
import os.path as ospath
import re
import numpy as np
from scipy import ndimage
from functools import partial
from multiprocessing import Pool
from os import listdir, mkdir
from skimage.feature import peak_local_max


from utils.ImgUtils import loadstack, save2stack

#%%
def imgAllChannel(posID, probDir, dataDir):
    probRe = re.compile(r'{0}_prob.tiff'.format(posID))
    YFPRe = re.compile(r'w\dYFP-YM_{0}.tiff'.format(posID))
    RFPRe = re.compile(r'w\dRFP-YM_{0}.tiff'.format(posID))

    for probFile in listdir(probDir):
        print(probFile)
        if probRe.match(probFile):
            probStack = loadstack('{0}/{1}'.format(probDir, probFile))
            break
    
    for FPFile in listdir(dataDir):
        if YFPRe.match(FPFile):
            YFPStack = loadstack('{0}/{1}'.format(dataDir, FPFile))
        if RFPRe.match(FPFile):
            RFPStack = loadstack('{0}/{1}'.format(dataDir, FPFile))
    
    return (probStack, YFPStack, RFPStack)

#%%
def segProbStack(probStack, threshold = 127):
    counts = np.zeros(len(probStack))
    masks = []
    for idx, img in enumerate(probStack):
        labelOut = ndimage.label(ndimage.binary_opening(img>127))
        masks.append(labelOut[0])
        counts[idx] = labelOut[1]
    return masks, counts


#%%
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="A script to segment probablity stacks generated by Pipeline_ProbStack")    
    parser.add_argument("WorkDir", help="The directory containing all the image stacks (only ends with .tiff). Should be generated from Pipeline_ProbStack.py")
    parser.add_argument("-o", "--Output", help="The directory for csv output")
    parser.add_argument("-t", "--MultiThread", type=int, default=1, help="Number of thread to use, default = 1")
    parser.add_argument("--temp", default='./pipeline_temp', help="The directory for temp files")

    args = parser.parse_args()

    wDir = args.WorkDir

    if args.Output:
        oDir = ospath.normpath(args.Output)
    else:
        oDir = ospath.normpath('./pipeline_SegProb_output')
    if not ospath.exists(oDir):
        mkdir(oDir)

    print("Output to " + oDir)

    mtNum = args.MultiThread
    if mtNum == 1:
        multiP = False
    elif mtNum < 1:
        print("Not valid thread number, now working in single thread mode")
        multiP = False
    else:
        multiP = True
    
    tempPath = args.temp
    if not ospath.exists(tempPath):
        mkdir(tempPath)
    pass


#%%
